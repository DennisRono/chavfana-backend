"""created tables

Revision ID: e92e8964dcf4
Revises: 
Create Date: 2025-10-25 14:57:09.641519

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e92e8964dcf4'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('attachments',
    sa.Column('owner_type', sa.String(length=100), nullable=False, comment='Project, Plot, SoilAnalysis, etc.'),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('mime_type', sa.String(length=100), nullable=False),
    sa.Column('size_bytes', sa.Integer(), nullable=False),
    sa.Column('uploaded_by_id', sa.UUID(), nullable=False),
    sa.Column('uploaded_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_attachments_created_at'), 'attachments', ['created_at'], unique=False)
    op.create_index(op.f('ix_attachments_created_by_id'), 'attachments', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_attachments_deleted_at'), 'attachments', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_attachments_deleted_by_id'), 'attachments', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_attachments_id'), 'attachments', ['id'], unique=False)
    op.create_index(op.f('ix_attachments_is_deleted'), 'attachments', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_attachments_owner_id'), 'attachments', ['owner_id'], unique=False)
    op.create_index('ix_attachments_owner_type_id', 'attachments', ['owner_type', 'owner_id'], unique=False)
    op.create_index(op.f('ix_attachments_updated_at'), 'attachments', ['updated_at'], unique=False)
    op.create_index(op.f('ix_attachments_updated_by_id'), 'attachments', ['updated_by_id'], unique=False)
    op.create_index(op.f('ix_attachments_uploaded_by_id'), 'attachments', ['uploaded_by_id'], unique=False)
    op.create_table('audit_logs',
    sa.Column('entity_type', sa.String(length=100), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('change_type', sa.String(length=50), nullable=False, comment='CREATE, UPDATE, DELETE'),
    sa.Column('changed_by_id', sa.UUID(), nullable=False),
    sa.Column('changed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('diff', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_changed_at'), 'audit_logs', ['changed_at'], unique=False)
    op.create_index(op.f('ix_audit_logs_changed_by_id'), 'audit_logs', ['changed_by_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_created_at'), 'audit_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_audit_logs_created_by_id'), 'audit_logs', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_deleted_at'), 'audit_logs', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_audit_logs_deleted_by_id'), 'audit_logs', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_entity_id'), 'audit_logs', ['entity_id'], unique=False)
    op.create_index('ix_audit_logs_entity_type_id', 'audit_logs', ['entity_type', 'entity_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_index(op.f('ix_audit_logs_is_deleted'), 'audit_logs', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_audit_logs_updated_at'), 'audit_logs', ['updated_at'], unique=False)
    op.create_index(op.f('ix_audit_logs_updated_by_id'), 'audit_logs', ['updated_by_id'], unique=False)
    op.create_table('contacts',
    sa.Column('contact_type', sa.String(length=50), nullable=False, comment='SUPPLIER, BUYER, SERVICE_PROVIDER, VET, AGRONOMIST'),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('address', sa.String(length=500), nullable=True),
    sa.Column('notes', sa.String(length=1024), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_contacts_contact_type', 'contacts', ['contact_type'], unique=False)
    op.create_index(op.f('ix_contacts_created_at'), 'contacts', ['created_at'], unique=False)
    op.create_index(op.f('ix_contacts_created_by_id'), 'contacts', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_contacts_deleted_at'), 'contacts', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_contacts_deleted_by_id'), 'contacts', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_contacts_email'), 'contacts', ['email'], unique=False)
    op.create_index(op.f('ix_contacts_id'), 'contacts', ['id'], unique=False)
    op.create_index(op.f('ix_contacts_is_deleted'), 'contacts', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_contacts_updated_at'), 'contacts', ['updated_at'], unique=False)
    op.create_index(op.f('ix_contacts_updated_by_id'), 'contacts', ['updated_by_id'], unique=False)
    op.create_table('crop_species',
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('variety', sa.String(length=200), nullable=True),
    sa.Column('species_type', sa.String(length=50), nullable=False, comment='VEGETABLE, CEREAL, FRUIT, LEGUME, etc.'),
    sa.Column('bloom_season', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.String(length=1024), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_crop_species_created_at'), 'crop_species', ['created_at'], unique=False)
    op.create_index(op.f('ix_crop_species_created_by_id'), 'crop_species', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_crop_species_deleted_at'), 'crop_species', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_crop_species_deleted_by_id'), 'crop_species', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_crop_species_id'), 'crop_species', ['id'], unique=False)
    op.create_index(op.f('ix_crop_species_is_deleted'), 'crop_species', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_crop_species_name'), 'crop_species', ['name'], unique=False)
    op.create_index(op.f('ix_crop_species_updated_at'), 'crop_species', ['updated_at'], unique=False)
    op.create_index(op.f('ix_crop_species_updated_by_id'), 'crop_species', ['updated_by_id'], unique=False)
    op.create_table('equipment',
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('serial_no', sa.String(length=100), nullable=True),
    sa.Column('purchase_date', sa.Date(), nullable=False),
    sa.Column('purchase_cost', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('last_service_date', sa.Date(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False, comment='Active, Maintenance, Retired'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_equipment_created_at'), 'equipment', ['created_at'], unique=False)
    op.create_index(op.f('ix_equipment_created_by_id'), 'equipment', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_equipment_deleted_at'), 'equipment', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_equipment_deleted_by_id'), 'equipment', ['deleted_by_id'], unique=False)
    op.create_index('ix_equipment_farm_id', 'equipment', ['farm_id'], unique=False)
    op.create_index(op.f('ix_equipment_id'), 'equipment', ['id'], unique=False)
    op.create_index(op.f('ix_equipment_is_deleted'), 'equipment', ['is_deleted'], unique=False)
    op.create_index('ix_equipment_status', 'equipment', ['status'], unique=False)
    op.create_index(op.f('ix_equipment_updated_at'), 'equipment', ['updated_at'], unique=False)
    op.create_index(op.f('ix_equipment_updated_by_id'), 'equipment', ['updated_by_id'], unique=False)
    op.create_table('projects',
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('project_type', sa.String(length=50), nullable=False, comment='PlantingProject, AnimalKeepingProject'),
    sa.Column('status', sa.String(length=50), nullable=False, comment='Planning, Active, Completed, Archived'),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('notes', sa.String(length=2048), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_projects_created_at'), 'projects', ['created_at'], unique=False)
    op.create_index(op.f('ix_projects_created_by_id'), 'projects', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_projects_deleted_at'), 'projects', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_projects_deleted_by_id'), 'projects', ['deleted_by_id'], unique=False)
    op.create_index('ix_projects_farm_id', 'projects', ['farm_id'], unique=False)
    op.create_index('ix_projects_farm_status', 'projects', ['farm_id', 'status'], unique=False)
    op.create_index(op.f('ix_projects_id'), 'projects', ['id'], unique=False)
    op.create_index(op.f('ix_projects_is_deleted'), 'projects', ['is_deleted'], unique=False)
    op.create_index('ix_projects_owner_id', 'projects', ['owner_id'], unique=False)
    op.create_index(op.f('ix_projects_status'), 'projects', ['status'], unique=False)
    op.create_index(op.f('ix_projects_updated_at'), 'projects', ['updated_at'], unique=False)
    op.create_index(op.f('ix_projects_updated_by_id'), 'projects', ['updated_by_id'], unique=False)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=False, comment='ADMIN, FARMER, MANAGER, EMPLOYEE, VET, AGRONOMIST, CONSULTANT'),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('profile_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_created_by_id'), 'users', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_users_deleted_at'), 'users', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_users_deleted_by_id'), 'users', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index('ix_users_is_active', 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_is_deleted'), 'users', ['is_deleted'], unique=False)
    op.create_index('ix_users_role', 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_updated_at'), 'users', ['updated_at'], unique=False)
    op.create_index(op.f('ix_users_updated_by_id'), 'users', ['updated_by_id'], unique=False)
    op.create_table('animal_keeping_projects',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('housing_type', sa.String(length=100), nullable=True),
    sa.Column('pasture_info', sa.String(length=500), nullable=True),
    sa.Column('carrying_capacity', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id')
    )
    op.create_index('ix_animal_keeping_projects_project_id', 'animal_keeping_projects', ['project_id'], unique=False)
    op.create_table('farms',
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.String(length=1024), nullable=True),
    sa.Column('country', sa.String(length=2), nullable=False),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.Column('geo_coordinate', sa.JSON(), nullable=True),
    sa.Column('rectangle_boundary', sa.JSON(), nullable=True),
    sa.Column('area_size', sa.Float(), nullable=False),
    sa.Column('area_unit', sa.String(length=20), nullable=False),
    sa.Column('time_zone', sa.String(length=50), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_farms_country'), 'farms', ['country'], unique=False)
    op.create_index(op.f('ix_farms_created_at'), 'farms', ['created_at'], unique=False)
    op.create_index(op.f('ix_farms_created_by_id'), 'farms', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_farms_deleted_at'), 'farms', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_farms_deleted_by_id'), 'farms', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_farms_id'), 'farms', ['id'], unique=False)
    op.create_index(op.f('ix_farms_is_deleted'), 'farms', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_farms_name'), 'farms', ['name'], unique=False)
    op.create_index('ix_farms_owner_id', 'farms', ['owner_id'], unique=False)
    op.create_index('ix_farms_owner_name', 'farms', ['owner_id', 'name'], unique=False)
    op.create_index(op.f('ix_farms_updated_at'), 'farms', ['updated_at'], unique=False)
    op.create_index(op.f('ix_farms_updated_by_id'), 'farms', ['updated_by_id'], unique=False)
    op.create_table('planting_projects',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('species_id', sa.UUID(), nullable=True),
    sa.Column('expected_yield', sa.Float(), nullable=True),
    sa.Column('yield_unit', sa.String(length=50), nullable=True),
    sa.Column('expected_revenue', sa.Float(), nullable=True),
    sa.Column('irrigation_type', sa.String(length=100), nullable=True),
    sa.Column('soil_analysis_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id')
    )
    op.create_index('ix_planting_projects_project_id', 'planting_projects', ['project_id'], unique=False)
    op.create_table('tasks',
    sa.Column('assigned_to_id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.String(length=1024), nullable=True),
    sa.Column('due_date', sa.Date(), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False, comment='Pending, In Progress, Completed, Cancelled'),
    sa.Column('priority', sa.String(length=20), nullable=False, comment='Low, Medium, High, Critical'),
    sa.Column('notes', sa.String(length=1024), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['assigned_to_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_tasks_assigned_to_id', 'tasks', ['assigned_to_id'], unique=False)
    op.create_index(op.f('ix_tasks_created_at'), 'tasks', ['created_at'], unique=False)
    op.create_index(op.f('ix_tasks_created_by_id'), 'tasks', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_tasks_deleted_at'), 'tasks', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_tasks_deleted_by_id'), 'tasks', ['deleted_by_id'], unique=False)
    op.create_index('ix_tasks_due_date', 'tasks', ['due_date'], unique=False)
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    op.create_index(op.f('ix_tasks_is_deleted'), 'tasks', ['is_deleted'], unique=False)
    op.create_index('ix_tasks_project_id', 'tasks', ['project_id'], unique=False)
    op.create_index('ix_tasks_status', 'tasks', ['status'], unique=False)
    op.create_index(op.f('ix_tasks_updated_at'), 'tasks', ['updated_at'], unique=False)
    op.create_index(op.f('ix_tasks_updated_by_id'), 'tasks', ['updated_by_id'], unique=False)
    op.create_table('animal_groups',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('group_name', sa.String(length=200), nullable=False),
    sa.Column('housing', sa.String(length=100), nullable=False, comment='Pasture, Barn, Coop, Pen, etc.'),
    sa.Column('starting_number', sa.Integer(), nullable=False),
    sa.Column('average_weight', sa.Float(), nullable=True),
    sa.Column('average_age', sa.Float(), nullable=True),
    sa.Column('disease_alerts', sa.Boolean(), nullable=False),
    sa.Column('quarantine_info', sa.String(length=500), nullable=True),
    sa.Column('notes', sa.String(length=1024), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['project_id'], ['animal_keeping_projects.project_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_animal_groups_created_at'), 'animal_groups', ['created_at'], unique=False)
    op.create_index(op.f('ix_animal_groups_created_by_id'), 'animal_groups', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_animal_groups_deleted_at'), 'animal_groups', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_animal_groups_deleted_by_id'), 'animal_groups', ['deleted_by_id'], unique=False)
    op.create_index('ix_animal_groups_housing', 'animal_groups', ['housing'], unique=False)
    op.create_index(op.f('ix_animal_groups_id'), 'animal_groups', ['id'], unique=False)
    op.create_index(op.f('ix_animal_groups_is_deleted'), 'animal_groups', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_animal_groups_project_id'), 'animal_groups', ['project_id'], unique=False)
    op.create_index(op.f('ix_animal_groups_updated_at'), 'animal_groups', ['updated_at'], unique=False)
    op.create_index(op.f('ix_animal_groups_updated_by_id'), 'animal_groups', ['updated_by_id'], unique=False)
    op.create_table('employees',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('position', sa.String(length=100), nullable=False),
    sa.Column('employment_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('employment_end', sa.DateTime(timezone=True), nullable=True),
    sa.Column('salary_amount', sa.Float(), nullable=True),
    sa.Column('salary_currency', sa.String(length=3), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_employees_created_at'), 'employees', ['created_at'], unique=False)
    op.create_index(op.f('ix_employees_created_by_id'), 'employees', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_employees_deleted_at'), 'employees', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_employees_deleted_by_id'), 'employees', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_employees_farm_id'), 'employees', ['farm_id'], unique=False)
    op.create_index(op.f('ix_employees_id'), 'employees', ['id'], unique=False)
    op.create_index(op.f('ix_employees_is_deleted'), 'employees', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_employees_updated_at'), 'employees', ['updated_at'], unique=False)
    op.create_index(op.f('ix_employees_updated_by_id'), 'employees', ['updated_by_id'], unique=False)
    op.create_index('ix_employees_user_id', 'employees', ['user_id'], unique=True)
    op.create_table('inventory_items',
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('sku', sa.String(length=100), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=20), nullable=False, comment='KG, LITER, UNIT, POUND'),
    sa.Column('unit_cost', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('supplier_id', sa.UUID(), nullable=True),
    sa.Column('reorder_level', sa.Float(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sku')
    )
    op.create_index(op.f('ix_inventory_items_created_at'), 'inventory_items', ['created_at'], unique=False)
    op.create_index(op.f('ix_inventory_items_created_by_id'), 'inventory_items', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_inventory_items_deleted_at'), 'inventory_items', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_inventory_items_deleted_by_id'), 'inventory_items', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_inventory_items_farm_id'), 'inventory_items', ['farm_id'], unique=False)
    op.create_index(op.f('ix_inventory_items_id'), 'inventory_items', ['id'], unique=False)
    op.create_index(op.f('ix_inventory_items_is_deleted'), 'inventory_items', ['is_deleted'], unique=False)
    op.create_index('ix_inventory_items_sku', 'inventory_items', ['sku'], unique=True)
    op.create_index(op.f('ix_inventory_items_updated_at'), 'inventory_items', ['updated_at'], unique=False)
    op.create_index(op.f('ix_inventory_items_updated_by_id'), 'inventory_items', ['updated_by_id'], unique=False)
    op.create_table('planting_events',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('plot_id', sa.UUID(), nullable=False),
    sa.Column('planting_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('area_size', sa.Float(), nullable=False),
    sa.Column('area_unit', sa.String(length=20), nullable=False),
    sa.Column('stage', sa.String(length=50), nullable=False, comment='Seedling, Vegetative, Flowering, Fruiting, Mature'),
    sa.Column('notes', sa.String(length=1024), nullable=True),
    sa.Column('species_details', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['project_id'], ['planting_projects.project_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id', 'id')
    )
    op.create_index(op.f('ix_planting_events_created_at'), 'planting_events', ['created_at'], unique=False)
    op.create_index(op.f('ix_planting_events_created_by_id'), 'planting_events', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_planting_events_deleted_at'), 'planting_events', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_planting_events_deleted_by_id'), 'planting_events', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_planting_events_id'), 'planting_events', ['id'], unique=False)
    op.create_index(op.f('ix_planting_events_is_deleted'), 'planting_events', ['is_deleted'], unique=False)
    op.create_index('ix_planting_events_planting_date', 'planting_events', ['planting_date'], unique=False)
    op.create_index(op.f('ix_planting_events_plot_id'), 'planting_events', ['plot_id'], unique=False)
    op.create_index('ix_planting_events_project_id', 'planting_events', ['project_id'], unique=False)
    op.create_index(op.f('ix_planting_events_updated_at'), 'planting_events', ['updated_at'], unique=False)
    op.create_index(op.f('ix_planting_events_updated_by_id'), 'planting_events', ['updated_by_id'], unique=False)
    op.create_table('plots',
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('plot_code', sa.String(length=50), nullable=False),
    sa.Column('area_size', sa.Float(), nullable=False),
    sa.Column('area_unit', sa.String(length=20), nullable=False),
    sa.Column('soil_profile', sa.JSON(), nullable=True),
    sa.Column('gps_bounds', sa.JSON(), nullable=True),
    sa.Column('current_crop_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_plots_created_at'), 'plots', ['created_at'], unique=False)
    op.create_index(op.f('ix_plots_created_by_id'), 'plots', ['created_by_id'], unique=False)
    op.create_index('ix_plots_current_crop', 'plots', ['current_crop_id'], unique=False)
    op.create_index(op.f('ix_plots_current_crop_id'), 'plots', ['current_crop_id'], unique=False)
    op.create_index(op.f('ix_plots_deleted_at'), 'plots', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_plots_deleted_by_id'), 'plots', ['deleted_by_id'], unique=False)
    op.create_index('ix_plots_farm_id', 'plots', ['farm_id'], unique=False)
    op.create_index('ix_plots_farm_plotcode', 'plots', ['farm_id', 'plot_code'], unique=True)
    op.create_index(op.f('ix_plots_id'), 'plots', ['id'], unique=False)
    op.create_index(op.f('ix_plots_is_deleted'), 'plots', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_plots_plot_code'), 'plots', ['plot_code'], unique=False)
    op.create_index(op.f('ix_plots_updated_at'), 'plots', ['updated_at'], unique=False)
    op.create_index(op.f('ix_plots_updated_by_id'), 'plots', ['updated_by_id'], unique=False)
    op.create_table('seasons',
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('notes', sa.String(length=1024), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_seasons_created_at'), 'seasons', ['created_at'], unique=False)
    op.create_index(op.f('ix_seasons_created_by_id'), 'seasons', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_seasons_deleted_at'), 'seasons', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_seasons_deleted_by_id'), 'seasons', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_seasons_farm_id'), 'seasons', ['farm_id'], unique=False)
    op.create_index(op.f('ix_seasons_id'), 'seasons', ['id'], unique=False)
    op.create_index(op.f('ix_seasons_is_deleted'), 'seasons', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_seasons_updated_at'), 'seasons', ['updated_at'], unique=False)
    op.create_index(op.f('ix_seasons_updated_by_id'), 'seasons', ['updated_by_id'], unique=False)
    op.create_table('weather_observations',
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('observed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('rainfall_mm', sa.Float(), nullable=True),
    sa.Column('wind_speed', sa.Float(), nullable=True),
    sa.Column('wind_direction', sa.String(length=20), nullable=True),
    sa.Column('notes', sa.String(length=500), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_weather_observations_created_at'), 'weather_observations', ['created_at'], unique=False)
    op.create_index(op.f('ix_weather_observations_created_by_id'), 'weather_observations', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_weather_observations_deleted_at'), 'weather_observations', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_weather_observations_deleted_by_id'), 'weather_observations', ['deleted_by_id'], unique=False)
    op.create_index('ix_weather_observations_farm_id', 'weather_observations', ['farm_id'], unique=False)
    op.create_index(op.f('ix_weather_observations_id'), 'weather_observations', ['id'], unique=False)
    op.create_index(op.f('ix_weather_observations_is_deleted'), 'weather_observations', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_weather_observations_observed_at'), 'weather_observations', ['observed_at'], unique=False)
    op.create_index(op.f('ix_weather_observations_updated_at'), 'weather_observations', ['updated_at'], unique=False)
    op.create_index(op.f('ix_weather_observations_updated_by_id'), 'weather_observations', ['updated_by_id'], unique=False)
    op.create_table('animals',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('group_id', sa.UUID(), nullable=True),
    sa.Column('tag', sa.String(length=100), nullable=False),
    sa.Column('breed', sa.String(length=100), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('arrival_date', sa.Date(), nullable=False),
    sa.Column('birthday', sa.Date(), nullable=True),
    sa.Column('animal_type', sa.String(length=50), nullable=False, comment='Cattle, Sheep, Goat, Pig, Chicken, etc.'),
    sa.Column('gender', sa.String(length=20), nullable=False),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('age_estimate', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('health_status', sa.String(length=50), nullable=False, comment='Healthy, Sick, Recovering, Quarantined'),
    sa.Column('insurance_policy', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['group_id'], ['animal_groups.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['animal_keeping_projects.project_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_animals_created_at'), 'animals', ['created_at'], unique=False)
    op.create_index(op.f('ix_animals_created_by_id'), 'animals', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_animals_deleted_at'), 'animals', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_animals_deleted_by_id'), 'animals', ['deleted_by_id'], unique=False)
    op.create_index('ix_animals_group_id', 'animals', ['group_id'], unique=False)
    op.create_index(op.f('ix_animals_id'), 'animals', ['id'], unique=False)
    op.create_index(op.f('ix_animals_is_active'), 'animals', ['is_active'], unique=False)
    op.create_index(op.f('ix_animals_is_deleted'), 'animals', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_animals_project_id'), 'animals', ['project_id'], unique=False)
    op.create_index(op.f('ix_animals_tag'), 'animals', ['tag'], unique=False)
    op.create_index(op.f('ix_animals_updated_at'), 'animals', ['updated_at'], unique=False)
    op.create_index(op.f('ix_animals_updated_by_id'), 'animals', ['updated_by_id'], unique=False)
    op.create_table('daily_entries',
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('author_user_id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('plot_id', sa.UUID(), nullable=True),
    sa.Column('entry_type', sa.String(length=50), nullable=False, comment='Activity, Note, Expense, Observation'),
    sa.Column('content', sa.JSON(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('cost', sa.Float(), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['author_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['plot_id'], ['plots.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_daily_entries_created_at'), 'daily_entries', ['created_at'], unique=False)
    op.create_index(op.f('ix_daily_entries_created_by_id'), 'daily_entries', ['created_by_id'], unique=False)
    op.create_index('ix_daily_entries_date', 'daily_entries', ['date'], unique=False)
    op.create_index(op.f('ix_daily_entries_deleted_at'), 'daily_entries', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_daily_entries_deleted_by_id'), 'daily_entries', ['deleted_by_id'], unique=False)
    op.create_index('ix_daily_entries_farm_date', 'daily_entries', ['farm_id', 'date'], unique=False)
    op.create_index('ix_daily_entries_farm_id', 'daily_entries', ['farm_id'], unique=False)
    op.create_index(op.f('ix_daily_entries_id'), 'daily_entries', ['id'], unique=False)
    op.create_index(op.f('ix_daily_entries_is_deleted'), 'daily_entries', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_daily_entries_updated_at'), 'daily_entries', ['updated_at'], unique=False)
    op.create_index(op.f('ix_daily_entries_updated_by_id'), 'daily_entries', ['updated_by_id'], unique=False)
    op.create_table('soil_analyses',
    sa.Column('plot_id', sa.UUID(), nullable=False),
    sa.Column('sample_date', sa.Date(), nullable=False),
    sa.Column('phosphorous', sa.Float(), nullable=True),
    sa.Column('potassium', sa.Float(), nullable=True),
    sa.Column('nitrogen', sa.Float(), nullable=True),
    sa.Column('soil_ph', sa.Float(), nullable=True),
    sa.Column('organic_matter', sa.Float(), nullable=True),
    sa.Column('notes', sa.String(length=1024), nullable=True),
    sa.Column('lab_report_url', sa.String(length=500), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['plot_id'], ['plots.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_soil_analyses_created_at'), 'soil_analyses', ['created_at'], unique=False)
    op.create_index(op.f('ix_soil_analyses_created_by_id'), 'soil_analyses', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_soil_analyses_deleted_at'), 'soil_analyses', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_soil_analyses_deleted_by_id'), 'soil_analyses', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_soil_analyses_id'), 'soil_analyses', ['id'], unique=False)
    op.create_index(op.f('ix_soil_analyses_is_deleted'), 'soil_analyses', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_soil_analyses_plot_id'), 'soil_analyses', ['plot_id'], unique=False)
    op.create_index(op.f('ix_soil_analyses_sample_date'), 'soil_analyses', ['sample_date'], unique=False)
    op.create_index(op.f('ix_soil_analyses_updated_at'), 'soil_analyses', ['updated_at'], unique=False)
    op.create_index(op.f('ix_soil_analyses_updated_by_id'), 'soil_analyses', ['updated_by_id'], unique=False)
    op.create_table('transactions',
    sa.Column('farm_id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=True),
    sa.Column('item_id', sa.UUID(), nullable=True),
    sa.Column('transaction_type', sa.String(length=50), nullable=False, comment='PURCHASE, SALE, EXPENSE, INCOME'),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('notes', sa.String(length=1024), nullable=True),
    sa.Column('related_party_id', sa.UUID(), nullable=True),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['farm_id'], ['farms.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['item_id'], ['inventory_items.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transactions_created_at'), 'transactions', ['created_at'], unique=False)
    op.create_index('ix_transactions_date', 'transactions', ['date'], unique=False)
    op.create_index(op.f('ix_transactions_deleted_at'), 'transactions', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_transactions_deleted_by_id'), 'transactions', ['deleted_by_id'], unique=False)
    op.create_index('ix_transactions_farm_date', 'transactions', ['farm_id', 'date'], unique=False)
    op.create_index('ix_transactions_farm_id', 'transactions', ['farm_id'], unique=False)
    op.create_index(op.f('ix_transactions_id'), 'transactions', ['id'], unique=False)
    op.create_index(op.f('ix_transactions_is_deleted'), 'transactions', ['is_deleted'], unique=False)
    op.create_index('ix_transactions_project_id', 'transactions', ['project_id'], unique=False)
    op.create_index(op.f('ix_transactions_updated_at'), 'transactions', ['updated_at'], unique=False)
    op.create_index(op.f('ix_transactions_updated_by_id'), 'transactions', ['updated_by_id'], unique=False)
    op.create_table('veterinary_visits',
    sa.Column('animal_id', sa.UUID(), nullable=False),
    sa.Column('vet_id', sa.UUID(), nullable=False),
    sa.Column('visit_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('diagnosis', sa.String(length=500), nullable=True),
    sa.Column('treatment', sa.String(length=1024), nullable=True),
    sa.Column('cost', sa.Float(), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('notes', sa.String(length=1024), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record (UUID)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('created_by_id', sa.UUID(), nullable=True, comment='UUID of the user who created this record'),
    sa.Column('updated_by_id', sa.UUID(), nullable=True, comment='UUID of the user who last updated this record'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Flag indicating if the record has been soft-deleted'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft-deleted'),
    sa.Column('deleted_by_id', sa.UUID(), nullable=True, comment='UUID of the user who soft-deleted this record'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic concurrency control'),
    sa.ForeignKeyConstraint(['animal_id'], ['animals.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['vet_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_veterinary_visits_animal_id', 'veterinary_visits', ['animal_id'], unique=False)
    op.create_index(op.f('ix_veterinary_visits_created_at'), 'veterinary_visits', ['created_at'], unique=False)
    op.create_index(op.f('ix_veterinary_visits_created_by_id'), 'veterinary_visits', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_veterinary_visits_deleted_at'), 'veterinary_visits', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_veterinary_visits_deleted_by_id'), 'veterinary_visits', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_veterinary_visits_id'), 'veterinary_visits', ['id'], unique=False)
    op.create_index(op.f('ix_veterinary_visits_is_deleted'), 'veterinary_visits', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_veterinary_visits_updated_at'), 'veterinary_visits', ['updated_at'], unique=False)
    op.create_index(op.f('ix_veterinary_visits_updated_by_id'), 'veterinary_visits', ['updated_by_id'], unique=False)
    op.create_index('ix_veterinary_visits_vet_id', 'veterinary_visits', ['vet_id'], unique=False)
    op.create_index(op.f('ix_veterinary_visits_visit_date'), 'veterinary_visits', ['visit_date'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_veterinary_visits_visit_date'), table_name='veterinary_visits')
    op.drop_index('ix_veterinary_visits_vet_id', table_name='veterinary_visits')
    op.drop_index(op.f('ix_veterinary_visits_updated_by_id'), table_name='veterinary_visits')
    op.drop_index(op.f('ix_veterinary_visits_updated_at'), table_name='veterinary_visits')
    op.drop_index(op.f('ix_veterinary_visits_is_deleted'), table_name='veterinary_visits')
    op.drop_index(op.f('ix_veterinary_visits_id'), table_name='veterinary_visits')
    op.drop_index(op.f('ix_veterinary_visits_deleted_by_id'), table_name='veterinary_visits')
    op.drop_index(op.f('ix_veterinary_visits_deleted_at'), table_name='veterinary_visits')
    op.drop_index(op.f('ix_veterinary_visits_created_by_id'), table_name='veterinary_visits')
    op.drop_index(op.f('ix_veterinary_visits_created_at'), table_name='veterinary_visits')
    op.drop_index('ix_veterinary_visits_animal_id', table_name='veterinary_visits')
    op.drop_table('veterinary_visits')
    op.drop_index(op.f('ix_transactions_updated_by_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_updated_at'), table_name='transactions')
    op.drop_index('ix_transactions_project_id', table_name='transactions')
    op.drop_index(op.f('ix_transactions_is_deleted'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.drop_index('ix_transactions_farm_id', table_name='transactions')
    op.drop_index('ix_transactions_farm_date', table_name='transactions')
    op.drop_index(op.f('ix_transactions_deleted_by_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_deleted_at'), table_name='transactions')
    op.drop_index('ix_transactions_date', table_name='transactions')
    op.drop_index(op.f('ix_transactions_created_at'), table_name='transactions')
    op.drop_table('transactions')
    op.drop_index(op.f('ix_soil_analyses_updated_by_id'), table_name='soil_analyses')
    op.drop_index(op.f('ix_soil_analyses_updated_at'), table_name='soil_analyses')
    op.drop_index(op.f('ix_soil_analyses_sample_date'), table_name='soil_analyses')
    op.drop_index(op.f('ix_soil_analyses_plot_id'), table_name='soil_analyses')
    op.drop_index(op.f('ix_soil_analyses_is_deleted'), table_name='soil_analyses')
    op.drop_index(op.f('ix_soil_analyses_id'), table_name='soil_analyses')
    op.drop_index(op.f('ix_soil_analyses_deleted_by_id'), table_name='soil_analyses')
    op.drop_index(op.f('ix_soil_analyses_deleted_at'), table_name='soil_analyses')
    op.drop_index(op.f('ix_soil_analyses_created_by_id'), table_name='soil_analyses')
    op.drop_index(op.f('ix_soil_analyses_created_at'), table_name='soil_analyses')
    op.drop_table('soil_analyses')
    op.drop_index(op.f('ix_daily_entries_updated_by_id'), table_name='daily_entries')
    op.drop_index(op.f('ix_daily_entries_updated_at'), table_name='daily_entries')
    op.drop_index(op.f('ix_daily_entries_is_deleted'), table_name='daily_entries')
    op.drop_index(op.f('ix_daily_entries_id'), table_name='daily_entries')
    op.drop_index('ix_daily_entries_farm_id', table_name='daily_entries')
    op.drop_index('ix_daily_entries_farm_date', table_name='daily_entries')
    op.drop_index(op.f('ix_daily_entries_deleted_by_id'), table_name='daily_entries')
    op.drop_index(op.f('ix_daily_entries_deleted_at'), table_name='daily_entries')
    op.drop_index('ix_daily_entries_date', table_name='daily_entries')
    op.drop_index(op.f('ix_daily_entries_created_by_id'), table_name='daily_entries')
    op.drop_index(op.f('ix_daily_entries_created_at'), table_name='daily_entries')
    op.drop_table('daily_entries')
    op.drop_index(op.f('ix_animals_updated_by_id'), table_name='animals')
    op.drop_index(op.f('ix_animals_updated_at'), table_name='animals')
    op.drop_index(op.f('ix_animals_tag'), table_name='animals')
    op.drop_index(op.f('ix_animals_project_id'), table_name='animals')
    op.drop_index(op.f('ix_animals_is_deleted'), table_name='animals')
    op.drop_index(op.f('ix_animals_is_active'), table_name='animals')
    op.drop_index(op.f('ix_animals_id'), table_name='animals')
    op.drop_index('ix_animals_group_id', table_name='animals')
    op.drop_index(op.f('ix_animals_deleted_by_id'), table_name='animals')
    op.drop_index(op.f('ix_animals_deleted_at'), table_name='animals')
    op.drop_index(op.f('ix_animals_created_by_id'), table_name='animals')
    op.drop_index(op.f('ix_animals_created_at'), table_name='animals')
    op.drop_table('animals')
    op.drop_index(op.f('ix_weather_observations_updated_by_id'), table_name='weather_observations')
    op.drop_index(op.f('ix_weather_observations_updated_at'), table_name='weather_observations')
    op.drop_index(op.f('ix_weather_observations_observed_at'), table_name='weather_observations')
    op.drop_index(op.f('ix_weather_observations_is_deleted'), table_name='weather_observations')
    op.drop_index(op.f('ix_weather_observations_id'), table_name='weather_observations')
    op.drop_index('ix_weather_observations_farm_id', table_name='weather_observations')
    op.drop_index(op.f('ix_weather_observations_deleted_by_id'), table_name='weather_observations')
    op.drop_index(op.f('ix_weather_observations_deleted_at'), table_name='weather_observations')
    op.drop_index(op.f('ix_weather_observations_created_by_id'), table_name='weather_observations')
    op.drop_index(op.f('ix_weather_observations_created_at'), table_name='weather_observations')
    op.drop_table('weather_observations')
    op.drop_index(op.f('ix_seasons_updated_by_id'), table_name='seasons')
    op.drop_index(op.f('ix_seasons_updated_at'), table_name='seasons')
    op.drop_index(op.f('ix_seasons_is_deleted'), table_name='seasons')
    op.drop_index(op.f('ix_seasons_id'), table_name='seasons')
    op.drop_index(op.f('ix_seasons_farm_id'), table_name='seasons')
    op.drop_index(op.f('ix_seasons_deleted_by_id'), table_name='seasons')
    op.drop_index(op.f('ix_seasons_deleted_at'), table_name='seasons')
    op.drop_index(op.f('ix_seasons_created_by_id'), table_name='seasons')
    op.drop_index(op.f('ix_seasons_created_at'), table_name='seasons')
    op.drop_table('seasons')
    op.drop_index(op.f('ix_plots_updated_by_id'), table_name='plots')
    op.drop_index(op.f('ix_plots_updated_at'), table_name='plots')
    op.drop_index(op.f('ix_plots_plot_code'), table_name='plots')
    op.drop_index(op.f('ix_plots_is_deleted'), table_name='plots')
    op.drop_index(op.f('ix_plots_id'), table_name='plots')
    op.drop_index('ix_plots_farm_plotcode', table_name='plots')
    op.drop_index('ix_plots_farm_id', table_name='plots')
    op.drop_index(op.f('ix_plots_deleted_by_id'), table_name='plots')
    op.drop_index(op.f('ix_plots_deleted_at'), table_name='plots')
    op.drop_index(op.f('ix_plots_current_crop_id'), table_name='plots')
    op.drop_index('ix_plots_current_crop', table_name='plots')
    op.drop_index(op.f('ix_plots_created_by_id'), table_name='plots')
    op.drop_index(op.f('ix_plots_created_at'), table_name='plots')
    op.drop_table('plots')
    op.drop_index(op.f('ix_planting_events_updated_by_id'), table_name='planting_events')
    op.drop_index(op.f('ix_planting_events_updated_at'), table_name='planting_events')
    op.drop_index('ix_planting_events_project_id', table_name='planting_events')
    op.drop_index(op.f('ix_planting_events_plot_id'), table_name='planting_events')
    op.drop_index('ix_planting_events_planting_date', table_name='planting_events')
    op.drop_index(op.f('ix_planting_events_is_deleted'), table_name='planting_events')
    op.drop_index(op.f('ix_planting_events_id'), table_name='planting_events')
    op.drop_index(op.f('ix_planting_events_deleted_by_id'), table_name='planting_events')
    op.drop_index(op.f('ix_planting_events_deleted_at'), table_name='planting_events')
    op.drop_index(op.f('ix_planting_events_created_by_id'), table_name='planting_events')
    op.drop_index(op.f('ix_planting_events_created_at'), table_name='planting_events')
    op.drop_table('planting_events')
    op.drop_index(op.f('ix_inventory_items_updated_by_id'), table_name='inventory_items')
    op.drop_index(op.f('ix_inventory_items_updated_at'), table_name='inventory_items')
    op.drop_index('ix_inventory_items_sku', table_name='inventory_items')
    op.drop_index(op.f('ix_inventory_items_is_deleted'), table_name='inventory_items')
    op.drop_index(op.f('ix_inventory_items_id'), table_name='inventory_items')
    op.drop_index(op.f('ix_inventory_items_farm_id'), table_name='inventory_items')
    op.drop_index(op.f('ix_inventory_items_deleted_by_id'), table_name='inventory_items')
    op.drop_index(op.f('ix_inventory_items_deleted_at'), table_name='inventory_items')
    op.drop_index(op.f('ix_inventory_items_created_by_id'), table_name='inventory_items')
    op.drop_index(op.f('ix_inventory_items_created_at'), table_name='inventory_items')
    op.drop_table('inventory_items')
    op.drop_index('ix_employees_user_id', table_name='employees')
    op.drop_index(op.f('ix_employees_updated_by_id'), table_name='employees')
    op.drop_index(op.f('ix_employees_updated_at'), table_name='employees')
    op.drop_index(op.f('ix_employees_is_deleted'), table_name='employees')
    op.drop_index(op.f('ix_employees_id'), table_name='employees')
    op.drop_index(op.f('ix_employees_farm_id'), table_name='employees')
    op.drop_index(op.f('ix_employees_deleted_by_id'), table_name='employees')
    op.drop_index(op.f('ix_employees_deleted_at'), table_name='employees')
    op.drop_index(op.f('ix_employees_created_by_id'), table_name='employees')
    op.drop_index(op.f('ix_employees_created_at'), table_name='employees')
    op.drop_table('employees')
    op.drop_index(op.f('ix_animal_groups_updated_by_id'), table_name='animal_groups')
    op.drop_index(op.f('ix_animal_groups_updated_at'), table_name='animal_groups')
    op.drop_index(op.f('ix_animal_groups_project_id'), table_name='animal_groups')
    op.drop_index(op.f('ix_animal_groups_is_deleted'), table_name='animal_groups')
    op.drop_index(op.f('ix_animal_groups_id'), table_name='animal_groups')
    op.drop_index('ix_animal_groups_housing', table_name='animal_groups')
    op.drop_index(op.f('ix_animal_groups_deleted_by_id'), table_name='animal_groups')
    op.drop_index(op.f('ix_animal_groups_deleted_at'), table_name='animal_groups')
    op.drop_index(op.f('ix_animal_groups_created_by_id'), table_name='animal_groups')
    op.drop_index(op.f('ix_animal_groups_created_at'), table_name='animal_groups')
    op.drop_table('animal_groups')
    op.drop_index(op.f('ix_tasks_updated_by_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_updated_at'), table_name='tasks')
    op.drop_index('ix_tasks_status', table_name='tasks')
    op.drop_index('ix_tasks_project_id', table_name='tasks')
    op.drop_index(op.f('ix_tasks_is_deleted'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.drop_index('ix_tasks_due_date', table_name='tasks')
    op.drop_index(op.f('ix_tasks_deleted_by_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_deleted_at'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_created_by_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_created_at'), table_name='tasks')
    op.drop_index('ix_tasks_assigned_to_id', table_name='tasks')
    op.drop_table('tasks')
    op.drop_index('ix_planting_projects_project_id', table_name='planting_projects')
    op.drop_table('planting_projects')
    op.drop_index(op.f('ix_farms_updated_by_id'), table_name='farms')
    op.drop_index(op.f('ix_farms_updated_at'), table_name='farms')
    op.drop_index('ix_farms_owner_name', table_name='farms')
    op.drop_index('ix_farms_owner_id', table_name='farms')
    op.drop_index(op.f('ix_farms_name'), table_name='farms')
    op.drop_index(op.f('ix_farms_is_deleted'), table_name='farms')
    op.drop_index(op.f('ix_farms_id'), table_name='farms')
    op.drop_index(op.f('ix_farms_deleted_by_id'), table_name='farms')
    op.drop_index(op.f('ix_farms_deleted_at'), table_name='farms')
    op.drop_index(op.f('ix_farms_created_by_id'), table_name='farms')
    op.drop_index(op.f('ix_farms_created_at'), table_name='farms')
    op.drop_index(op.f('ix_farms_country'), table_name='farms')
    op.drop_table('farms')
    op.drop_index('ix_animal_keeping_projects_project_id', table_name='animal_keeping_projects')
    op.drop_table('animal_keeping_projects')
    op.drop_index(op.f('ix_users_updated_by_id'), table_name='users')
    op.drop_index(op.f('ix_users_updated_at'), table_name='users')
    op.drop_index('ix_users_role', table_name='users')
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.drop_index('ix_users_is_active', table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_deleted_by_id'), table_name='users')
    op.drop_index(op.f('ix_users_deleted_at'), table_name='users')
    op.drop_index(op.f('ix_users_created_by_id'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_projects_updated_by_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_updated_at'), table_name='projects')
    op.drop_index(op.f('ix_projects_status'), table_name='projects')
    op.drop_index('ix_projects_owner_id', table_name='projects')
    op.drop_index(op.f('ix_projects_is_deleted'), table_name='projects')
    op.drop_index(op.f('ix_projects_id'), table_name='projects')
    op.drop_index('ix_projects_farm_status', table_name='projects')
    op.drop_index('ix_projects_farm_id', table_name='projects')
    op.drop_index(op.f('ix_projects_deleted_by_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_deleted_at'), table_name='projects')
    op.drop_index(op.f('ix_projects_created_by_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_created_at'), table_name='projects')
    op.drop_table('projects')
    op.drop_index(op.f('ix_equipment_updated_by_id'), table_name='equipment')
    op.drop_index(op.f('ix_equipment_updated_at'), table_name='equipment')
    op.drop_index('ix_equipment_status', table_name='equipment')
    op.drop_index(op.f('ix_equipment_is_deleted'), table_name='equipment')
    op.drop_index(op.f('ix_equipment_id'), table_name='equipment')
    op.drop_index('ix_equipment_farm_id', table_name='equipment')
    op.drop_index(op.f('ix_equipment_deleted_by_id'), table_name='equipment')
    op.drop_index(op.f('ix_equipment_deleted_at'), table_name='equipment')
    op.drop_index(op.f('ix_equipment_created_by_id'), table_name='equipment')
    op.drop_index(op.f('ix_equipment_created_at'), table_name='equipment')
    op.drop_table('equipment')
    op.drop_index(op.f('ix_crop_species_updated_by_id'), table_name='crop_species')
    op.drop_index(op.f('ix_crop_species_updated_at'), table_name='crop_species')
    op.drop_index(op.f('ix_crop_species_name'), table_name='crop_species')
    op.drop_index(op.f('ix_crop_species_is_deleted'), table_name='crop_species')
    op.drop_index(op.f('ix_crop_species_id'), table_name='crop_species')
    op.drop_index(op.f('ix_crop_species_deleted_by_id'), table_name='crop_species')
    op.drop_index(op.f('ix_crop_species_deleted_at'), table_name='crop_species')
    op.drop_index(op.f('ix_crop_species_created_by_id'), table_name='crop_species')
    op.drop_index(op.f('ix_crop_species_created_at'), table_name='crop_species')
    op.drop_table('crop_species')
    op.drop_index(op.f('ix_contacts_updated_by_id'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_updated_at'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_is_deleted'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_id'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_email'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_deleted_by_id'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_deleted_at'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_created_by_id'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_created_at'), table_name='contacts')
    op.drop_index('ix_contacts_contact_type', table_name='contacts')
    op.drop_table('contacts')
    op.drop_index(op.f('ix_audit_logs_updated_by_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_updated_at'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_is_deleted'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_index('ix_audit_logs_entity_type_id', table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_entity_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_deleted_by_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_deleted_at'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_created_by_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_created_at'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_changed_by_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_changed_at'), table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_attachments_uploaded_by_id'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_updated_by_id'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_updated_at'), table_name='attachments')
    op.drop_index('ix_attachments_owner_type_id', table_name='attachments')
    op.drop_index(op.f('ix_attachments_owner_id'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_is_deleted'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_id'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_deleted_by_id'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_deleted_at'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_created_by_id'), table_name='attachments')
    op.drop_index(op.f('ix_attachments_created_at'), table_name='attachments')
    op.drop_table('attachments')
    # ### end Alembic commands ###
